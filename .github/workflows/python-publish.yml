name: Publish Python Package with OIDC

on:
  release:
    types:
      - published

permissions:
  id-token: write
  contents: read

jobs:
  publish:
    name: Upload Release to PyPI
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Step 3: Install dependencies for building the package
      - name: Install dependencies
        run: python -m pip install -U build

      # Step 4: Build the package
      - name: Build package
        run: python -m build

      # Step 5: Mint an API token using OIDC
      - name: Mint API token
        id: mint-token
        run: |
          # Retrieve the ambient OIDC token
          response=$(curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${response}")

          # Exchange the OIDC token for a PyPI API token
          response=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${response}")

          # Mask the newly minted API token to avoid leaking it
          echo "::add-mask::${api_token}"

          # Expose the token as output for the next steps
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      # Step 6: Publish the package to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
